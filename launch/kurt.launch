<?xml version="1.0"?>
<launch>
    <!-- Kp: oscillation starts at roughly 0.0025 (forwards only) -->
    <arg name="Kp" default="0.00125" />
    <arg name="Ki" default="0.0" />
    <arg name="Kd" default="0.001" />
    <arg name="windup_limit" default="1" />

    <param name="robot_description" command="$(find xacro)/xacro '$(find kurtberry_pi)/urdf/kurt_indoor.urdf.xacro'" />

    <node name="kurtberry_pi_node" pkg="kurtberry_pi" type="kurtberry_pi_node"
        output="screen"
        required="true"
        launch-prefix="nice -n -1">  <!-- Increase priority with `nice` -->

        <!--====================================
            Motor PID parameters (mandatory)
        =====================================-->

        <param name="Kp" value="$(arg Kp)" />
        <param name="Ki" value="$(arg Ki)" />
        <param name="Kd" value="$(arg Kd)" />
        <param name="windup_limit" value="$(arg windup_limit)" />

        <!--===============================================
            Motor hardware and protection configuration
        ================================================-->

        <!--
            `left_ctrl_gpio` / `left_dir_gpio` / `right_ctrl_gpio` / `right_dir_gpio`

            Configures which Pi GPIOs are attached to the motor drivers.
        -->
        <param name="left_ctrl_gpio" value="22" />
        <param name="left_dir_gpio" value="23" />
        <param name="right_ctrl_gpio" value="5" />
        <param name="right_dir_gpio" value="6" />

        <!--
            `left_invert` / `right_invert`

            Invert direction of left/right motor.
        -->
        <param name="left_invert" value="true" />
        <param name="right_invert" value="false" />

        <!--
            `pwm_sample_rate` / `pwm_freq` / `pwm_range`

            PWM sample rate (in microseconds between samples), frequency (in
            Hertz) and range to request from pigpio.

            Refer to the pigpio docs for information on:
            sample_rate:
            http://abyz.me.uk/rpi/pigpio/cif.html#gpioCfgClock
            freq:
            http://abyz.me.uk/rpi/pigpio/cif.html#gpioSetPWMfrequency
            range:
            http://abyz.me.uk/rpi/pigpio/cif.html#gpioSetPWMrange

            Since the Pi only has two hardware pins with PWM output, pigpio uses
            DMA-based software PWM. This imposes a somewhat strict limit on
            frequency and range, meaning that there's now a tradeoff between
            both.

            If the range is too high, it will be lowered automatically. Refer to
            the console output to see the actual range.

            Do not set a frequency below 2 kHz. This will cause current surges
            that are too large to be buffered by the installed capacitors. This
            causes the supply voltage to dip, which in turn pulls down the 5V
            rail, causing the Pi to reset or crash.
        -->
        <param name="pwm_sample_rate" value="1" />
        <param name="pwm_freq" value="3000" />
        <param name="pwm_range" value="500" />

        <!--
            `max_delta_ms`

            Maximum control loop iteration delta for the `Motor.cpp` controller.
            A large delay between updates can cause large jumps in the motor
            speed, which we want to avoid to reduce stress and current surges.

            This parameter limits the maximum time used to calculate the new
            speed, even if the real time is larger. The effect is a reduced
            acceleration.

            This is only used if the control loop is too slow. It normally runs
            at 20 Hz or more.
        -->
        <param name="max_delta_ms" value="50" />

        <!--
            `max_accel`

            Maximum change in raw motor speed per second. The speed is between
            -1.0 and 1.0, where -1.0 is maximum backwards speed and 1.0 is
            maximum forwards speed. This means an acceleration value of 0.1
            should take about 10 seconds to reach max. speed.
        -->
        <param name="max_accel" value="0.05" />

        <!--
            `max_dir_changes`

            Maximum number of motor direction changes per second.

            The motor drivers don't have integrated dead-time, so every
            direction change effectively causes a very brief short circuit. This
            limit protects the drivers from getting too hot due to many
            direction changes.
        -->
        <param name="max_dir_changes" value="1.0" />

        <!--
            `deadzone`

            Clamp speed values with a magnitude `<= deadzone` to zero. Helps
            eliminate coil whining when motors are stationary but driven with a
            low duty cycle (the PID controller won't correct this).
        -->
        <param name="deadzone" value="0.02" />


        <!--=========================
            Encoder configuration
        ==========================-->

        <!--
            `left_encoder_pattern` / `right_encoder_pattern`

            Substring of the encoder device name (in evdev) used to find the
            encoder. Must be unambiguous and match the name in the device tree.
        -->
        <param name="left_encoder_pattern" value="rot_left" />
        <param name="right_encoder_pattern" value="rot_right" />

        <!--
            `left_encoder_invert` / `right_encoder_invert`

            Invert direction of left/right encoder.
        -->
        <param name="left_encoder_invert" value="true" />
        <param name="right_encoder_invert" value="false" />

        <!--
            `encoder_wraparound`

            Number of encoder ticks after which the reported counter wraps to 0.
            Must be in-sync with the `steps` value in the device tree.
        -->
        <param name="encoder_wraparound" value="100000" />

        <!--
            `ticks_per_turn_of_wheel`

            Encoder ticks reported per completed wheel rotation. Used to
            calculate odometry. Could use some tuning to get better accuracy.
        -->
        <param name="ticks_per_turn_of_wheel" value="5000" />


        <!--=================================
            Debugging and general options
        ==================================-->

        <!--
            `update_rate_hz`

            Main loop update rate in Hz.

            Increasing this will increase accuracy/reactivity of the controller
            and CPU load, so this is a tradeoff. If the CPU can't keep up with
            the configured value, errors will be logged since this messes up all
            timing.

            100 Hz should be more than enough for most applications.
        -->
        <param name="update_rate_hz" value="100" />

        <!--
            `dryrun`

            Don't drive the motors, but run the rest of the controller stack.
            This is useful for testing something while preventing that the robot
            moves.
        -->
        <param name="dryrun" value="true" />

        <!--
            `debug`

            Output `ROS_DEBUG` messages to the console. This is a lot of
            continuous output and should only be enabled during development.
        -->
        <param name="debug" value="false" />
    </node>

    <node name="robot_state_publisher" pkg="robot_state_publisher" type="state_publisher" />

    <rosparam>
        joint_state_controller:
            type: joint_state_controller/JointStateController
            publish_rate: 50
        diffdrive:
            type: diff_drive_controller/DiffDriveController
            left_wheel: 'left_middle_wheel_joint'
            right_wheel: 'right_middle_wheel_joint'
            pose_covariance_diagonal: [0.001, 0.001, 1000000.0, 1000000.0, 1000000.0, 1000.0]
            twist_covariance_diagonal: [0.001, 0.001, 1000000.0, 1000000.0, 1000000.0, 1000.0]

            wheel_separation: 0.28
            wheel_radius: 0.06
            linear:
                x:
                    has_acceleration_limits: true
                    max_acceleration: 0.8
                    has_jerk_limits: true
                    max_jerk: 5.0
    </rosparam>
    <!--
    left_wheel: ['left_front_wheel_joint', 'left_middle_wheel_joint', 'left_back_wheel_joint']
    right_wheel: ['right_front_wheel_joint', 'right_middle_wheel_joint', 'right_back_wheel_joint']
    -->

    <node name="default_controller_spawner" pkg="controller_manager" type="spawner" output="screen"
      args="joint_state_controller diffdrive" />

    <!-- Redirect /cmd_vel to /diffdrive/cmd_vel. The controller spawner can't remap for us. -->
    <node name="cmd_vel_relay" pkg="topic_tools" type="relay" args="/cmd_vel /diffdrive/cmd_vel" />
    <!-- Same from /diffdrive/odom to /odom. -->
    <node name="odom_relay" pkg="topic_tools" type="relay" args="/diffdrive/odom /odom" />
</launch>
